
<div id="email_form_body" class="fs_split_body">
      <h2 class="centered">Login with Email</h2>
      <div class="login-form">
      <div class="wrapper">
      <h1>YTCT</h1>
      <form id="form" v-on:submit.prevent="loginUser">
        <input type="text" v-model="email" v-bind:class="{inactive: isActive.email, error: isError.email}" placeholder="E-Mail-Adresse" name="login_email" autocorrect="off" autocapitalize="off" spellcheck="false" data-email-healing="true">
        </br>
        <input type="text" v-model="name" v-bind:class="{inactive: isActive.name, error: isError.name}" placeholder="Benutzername" name="login_username" autocorrect="off" autocapitalize="off" spellcheck="false">
        </br>
        <input type="password" placeholder="Passwort" name="login_password" spellcheck="false">
        <p class="error_message"></p>
        <!--<p class="error_message" v-show="!validation.name">Name cannot be empty.</p>
        <p class="error_message" v-show="!validation.email">Please provide a valid email address.</p>-->
        <input type="hidden" name="_csrf_token" value="<%= get_csrf_token() %>">
        <button type="submit" id="submit_login">Login</button>
       </form>
       </div>
       </div>
</div>

   
<div id="email_form_footer" class="fs_split_body">
  <div class="login-form">
    <div class="wrapper">
      <p class="_dyp7q">Du hast ein Konto? <a class="_fcn8k" href="javascript:;">Melde dich an</a></p>


      
      <meta name="google-signin-client_id" content="322631440448-plr2ju1qshcftvfhhgbi06acrd3slu6o.apps.googleusercontent.com">
      <div class="g-signin2" data-onsuccess="onSuccess" data-onfailure="onFailure"></div>
      <script>
        function signOut() {
          var auth2 = gapi.auth2.getAuthInstance();
          auth2.signOut().then(function () {
            console.log('User signed out.');
          });
        }

        function onSuccess(googleUser) {
          var id_token = googleUser.getAuthResponse().id_token;
          console.log('ID Token: ' + id_token);

          var formData = new FormData(document.forms.namedItem("form"));
          formData.append('id_token', id_token);
        
          axios.post('/login', formData)
          .then(function (response) {
            console.log(response);
            document.write(response.data);
          })
          .catch(function (error) {
            console.log(error);
          });

          signOut();
        }

        function onFailure(error) {
          console.log(error);
        }
      </script>
      <script src="https://apis.google.com/js/platform.js" async defer></script>
      <style type="text/css">
      .g-signin2 { align-self: center;}
      .g-signin2 .abcRioButtonContentWrapper { flex-flow: row; }
      </style>
    </div>
  </div>
</div>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script type="text/javascript">
var emailRE = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/

// create Vue app
var app = new Vue({
  // element to mount to
  el: '#email_form_body',
  // initial data
  data: {
      name: '',
      email: '',
      signin: false
  },
  // after creation
  created: function () {
    window.addEventListener('keydown', this.keydown);
  },
  // computed property for form validation state
  computed: {
    validation: function () {
      return {
        name: !!this.name.trim(),
        email: emailRE.test(this.email)
      }
    },
    isValid: function () {
      return this.validation.email || this.validation.name
      // var validation = this.validation
      // return Object.keys(validation).every(function (key) {
      //   return validation[key]
      // })
    },
    isActive: function() {
      return {
        email: this.name != '',
        name: this.name == ''
      }
    },
    isError: function() {
      return {
        email: this.email != '' && !this.validation.email,
        name: this.name != '' && !this.validation.name,
      }
    }
  },
  // methods
  methods: {
    loginUser: function () {
      if (this.isValid) {
        // send login
        var formData = new FormData(document.forms.namedItem("form"));
         
        axios.post('/login', formData)
        .then(function (response) {
          document.write(response.data);
        })
        .catch(function (error) {
          document.getElementsByClassName("alert alert-danger")[0].innerHTML = "Incorrect username and/or password.";
          this.name = '';
          this.email = '';
          console.log(error);
        });
      }
    },
    keydown: function(event) {
      event = event || window.event;
      if (event.keyCode == 9 && document.activeElement.name == "login_email" && this.validation.email) {
        event.preventDefault();
        document.getElementsByName("login_password")[0].focus()
      }
    }
  }
})
</script>

